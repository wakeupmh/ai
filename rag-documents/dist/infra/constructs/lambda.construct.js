"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLambda = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const path = require("path");
const config_1 = require("../config");
class Lambda extends aws_lambda_nodejs_1.NodejsFunction {
    constructor(scope, id, props) {
        const config = (0, config_1.makeConfig)();
        const isProd = config.envName === 'prod';
        const environmentVariables = props.environmentVariables || {};
        const layers = (props.layers || []);
        // https://docs.powertools.aws.dev/lambda/typescript/latest/#environment-variables
        const powertoolsLayer = aws_lambda_1.LayerVersion.fromLayerVersionArn(scope, `${id}-powertools-layer`, `arn:aws:lambda:${config.region}:094274105915:layer:AWSLambdaPowertoolsTypeScript:16`);
        layers.push(powertoolsLayer);
        if (props.useSharedVpc) {
            props.overwrite = {
                ...props.overwrite,
                vpc: props.resourcesStack.sharedVpc,
                securityGroups: [props.resourcesStack.sharedVpcSg],
            };
        }
        const lambdaProps = {
            functionName: `${config.serviceName}-${props.name}`,
            entry: path.join(__dirname, '..', '..', 'src', 'functions', props.entry),
            description: props.description,
            timeout: aws_cdk_lib_1.Duration.seconds(300),
            runtime: aws_lambda_1.Runtime.NODEJS_18_X,
            architecture: aws_lambda_1.Architecture.ARM_64,
            tracing: aws_lambda_1.Tracing.ACTIVE,
            logRetention: isProd ? aws_logs_1.RetentionDays.ONE_YEAR : aws_logs_1.RetentionDays.ONE_WEEK,
            environment: {
                ENV_NAME: config.envName,
                AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1',
                POWERTOOLS_SERVICE_NAME: config.serviceName,
                POWERTOOLS_METRICS_NAMESPACE: config.projectName,
                OBSERVABILITY_LOGGER_ENABLED: config.observability.logger.enabled.toString(),
                OBSERVABILITY_LOGGER_LEVEL: config.observability.logger.level,
                OBSERVABILITY_METRICS_ENABLED: config.observability.metrics.enabled.toString(),
                OBSERVABILITY_TRACER_ENABLED: config.observability.tracer.enabled.toString(),
                ...environmentVariables,
            },
            bundling: {
                minify: true,
                sourceMap: false,
                target: 'es2021',
                logLevel: aws_lambda_nodejs_1.LogLevel.ERROR,
                loader: {
                    ".node": "file",
                },
                externalModules: [
                    '@aws-lambda-powertools/commons',
                    '@aws-lambda-powertools/logger',
                    '@aws-lambda-powertools/tracer',
                    '@aws-lambda-powertools/metrics',
                ],
            },
            memorySize: config.defaultMemorySize,
            layers,
            ...(props.overwrite || {}),
        };
        super(scope, id, lambdaProps);
        this.config = config;
    }
}
const makeLambda = (scope, id, props) => {
    const config = props.resourcesStack.config;
    const lambda = new Lambda(scope, id, props);
    if (props.resourcesStack.secret) {
        props.resourcesStack.secret.grantRead(lambda);
    }
    if (props.useDynamo) {
        props.tables = [...(props.tables || []), props.resourcesStack.table, props.resourcesStack.tableIndexes];
    }
    for (const table of props?.tables || []) {
        table.grantReadWriteData(lambda);
    }
    for (const topic of props?.topics || []) {
        topic.grantPublish(lambda);
    }
    for (const bucket of props?.buckets || []) {
        bucket.grantReadWrite(lambda);
    }
    if (props?.queues || props.allowQueueAccess) {
        lambda.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['sqs:*'],
            resources: ['*'],
        }));
    }
    if (props?.useSes) {
        lambda.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['ses:SendRawEmail', 'ses:GetTemplate', 'ses:SendTemplatedEmail'],
            resources: ['*'],
        }));
    }
    if (props?.userPools) {
        lambda.addToRolePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            actions: ['cognito-idp:*'],
            resources: ['*'],
        }));
    }
    new aws_cdk_lib_1.CfnOutput(lambda, `${config.serviceName}-${id}-output-arn`, {
        value: lambda.functionArn,
        exportName: `${config.serviceName}::function::${props.name}::arn`,
    });
    new aws_lambda_1.CfnPermission(lambda, `${config.serviceName}-${id}-lambda-permission`, {
        action: 'lambda:InvokeFunction',
        functionName: lambda.functionName,
        principal: 'apigateway.amazonaws.com',
    });
    return lambda;
};
exports.makeLambda = makeLambda;
//# sourceMappingURL=data:application/json;base64,